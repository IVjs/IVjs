declare class Definitions {
    getRandomNumberCommand: () => ICommand.GetRandomNumber;
    playVideoCommand: () => ICommand.PlayVideo;
    assignVariableCommand: () => ICommand.AssignVariable;
    assignFromVariableCommand: () => ICommand.AssignFromVariable;
    addButtonCommand: () => ICommand.AddButton;
    removeButtonCommand: () => ICommand.RemoveButton;
    removeAllButtonsCommand: () => ICommand.RemoveAllButtons;
    targetCommand: () => ICommand.Target;
    switchCommand: () => ICommand.Switch;
    stopExecutionCommand: () => ICommand.StopExecution;
    pauseExecutionCommand: () => ICommand.PauseExecution;
    goToNodeCommand: () => ICommand.GoToNode;
    executeAsyncCommand: () => ICommand.ExecuteAsync;
    executeSyncCommand: () => ICommand.ExecuteSync;
    executeJsCommand: () => ICommand.ExecuteJs;
    waitCommand: () => ICommand.Wait;
    timeoutCommand: () => ICommand.Timeout;
    goToCommand_usingNode: () => ICommand.GoToNodeCommand;
    goToCommand_usingTarget: () => ICommand.GoToNodeCommand;
    ivSettings: () => IV.Settings;
    calculateCommand: () => ICommand.Calculate;
    audioVolumeCommand: () => ICommand.AudioVolume;
    audioSourceCommand: () => ICommand.AudioSource;
    node: () => BaseNode;
    targetFunctionFactoryInput: () => CommandEngine.TargetFunctionFactoryInput;
    commandEngine: () => CommandEngine.Class;
    commandRunner: () => Runner.Class;
}
interface FactoryMap {
    addButtonCommand: ICommand.AddButton;
    removeButtonCommand: ICommand.RemoveButton;
    removeAllButtonsCommand: ICommand.RemoveAllButtons;
    getRandomNumberCommand: ICommand.GetRandomNumber;
    playVideoCommand: ICommand.PlayVideo;
    assignVariableCommand: ICommand.AssignVariable;
    assignFromVariableCommand: ICommand.AssignFromVariable;
    targetCommand: ICommand.Target;
    switchCommand: ICommand.Switch;
    stopExecutionCommand: ICommand.StopExecution;
    pauseExecutionCommand: ICommand.PauseExecution;
    goToNodeCommand: ICommand.GoToNode;
    executeAsyncCommand: ICommand.ExecuteAsync;
    executeSyncCommand: ICommand.ExecuteSync;
    executeJsCommand: ICommand.ExecuteJs;
    waitCommand: ICommand.Wait;
    timeoutCommand: ICommand.Timeout;
    goToCommand: ICommand.GoToNodeCommand;
    goToCommand_usingNode: ICommand.GoToNodeCommand;
    goToCommand_usingTarget: ICommand.GoToNodeCommand;
    calculateCommand: ICommand.Calculate;
    ivSettings: IV.Settings;
    audioVolumeCommand: ICommand.AudioVolume;
    audioSourceCommand: ICommand.AudioSource;
    node: BaseNode;
    targetFunctionFactoryInput: CommandEngine.TargetFunctionFactoryInput;
    commandEngine: CommandEngine.Class;
    commandRunner: Runner.Class;
}
export declare function create<T extends keyof Definitions>(faketory: T, overrides?: Partial<FactoryMap[T]>): FactoryMap[T];
export default create;
